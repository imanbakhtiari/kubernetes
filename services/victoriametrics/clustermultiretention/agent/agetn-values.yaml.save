global:
  # -- Image pull secrets, that can be shared across multiple helm charts
  imagePullSecrets: []
  image:
    # -- Image registry, that can be shared across multiple helm charts
    registry: ""
  # -- Openshift security context compatibility configuration
  compatibility:
    openshift:
      adaptSecurityContext: "auto"
  # -- k8s cluster domain suffix, uses for building storage pods' FQDN. Details are [here](https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/)
  cluster:
    dnsDomain: company.local.

replicaCount: 3
fullnameOverride: "vmagent"
remoteWrite:
  - url: http://vminsert-live.monitoring.svc.company.local:8480/insert/0/prometheus/
config:
  global:
    scrape_interval: 1s
    scrape_timeout: 1s

  scrape_configs:
    - job_name: "varnish"
      scrape_interval: 1s
      scrape_timeout: 1s
      metrics_path: /metrics
#      params:
#        format: ['prometheus']
      scheme: http
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: varnish
        - source_labels: [__address__]
          target_label: __address__
          replacement: varnish-exporter.varnish.svc.company.local:9131

    - job_name: "netdata-test"
      scrape_interval: 1s
      scrape_timeout: 1s
      metrics_path: /api/v1/allmetrics
      params:
        format: ['prometheus']
      scheme: http
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
            #regex: lb-mediasrv
          regex: webserver
        - source_labels: [__address__]
          target_label: __address__
            #replacement: netdata-service.lb-mediasrv.svc.company.local:19999
          replacement: netdata-service.monitoring.svc.company.local:19999

  - job_name: 'redis-standalone-metrics'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - redis-standalone
    metrics_path: /metrics
    scheme: http
    relabel_configs:
      - source_labels:
          - __meta_kubernetes_pod_label_app_kubernetes_io_name
          - __meta_kubernetes_pod_label_app_kubernetes_io_instance
          - __meta_kubernetes_pod_label_app_kubernetes_io_component
        action: keep
        regex: redis;redis-standalone;database

      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: metrics

      - source_labels: [__meta_kubernetes_pod_ip]
        target_label: __address__
        replacement: $1:9121

      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace

      - source_labels: [__meta_kubernetes_pod_name]
        target_label: kubernetes_pod_name

    - job_name: 'redis-cluster-metrics'
      kubernetes_sd_configs:
        - role: pod  # Discover Redis pods in the cluster
          namespaces:
            names:
              - redis-cluster  # Specify the namespace where your Redis pods are located

      metrics_path: /metrics  # Path for Redis exporter metrics
      scheme: http  # Use http unless your metrics endpoint requires https

      relabel_configs:
        # Match Redis pods by their specific labels
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name, __meta_kubernetes_pod_label_app_kubernetes_io_instance, __meta_kubernetes_pod_label_redis_setup_type]
          action: keep
          regex: redis-cluster;redis-cluster;cluster  # Match all three labels

        # Optionally label the instance with the pod's role (leader or follower)
        - source_labels: [__meta_kubernetes_pod_label_role]
          target_label: redis_role

        # Add app label for identification
        - source_labels: [__meta_kubernetes_pod_label_app]
          target_label: redis_app

        # Retain the pod address (this allows Prometheus to scrape from the specific pod)
        - source_labels: [__address__]
          target_label: __address__
          replacement: redis-cluster-metrics.redis-cluster.svc.cluster.local:9121

        # Optionally add namespace and pod name for more detailed identification
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: kubernetes_pod_name




         #  - job_name: "netdata"
          #    scrape_interval: 1s
          #    scrape_timeout: 1s
          #    metrics_path: /api/v1/allmetrics
          #    params:
          #      format: ['prometheus']
          #    scheme: http
          #    kubernetes_sd_configs:
          #      - role: pod
          #    relabel_configs:
          #      # Keep only pods matching the webserver job
          #      - source_labels: [__meta_kubernetes_pod_label_app]
          #        action: keep
          #        regex: webserver

          #      # Deduplicate targets by unique labels
          #      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_name]
          #        action: replace
          #        target_label: instance
          #        separator: "/"

          #      # Ensure target addresses use the service URL
          #      - source_labels: [__meta_kubernetes_pod_label_app]
          #        target_label: __address__
          #        replacement: netdata-service.monitoring.svc.company.local:19999

          #      # Add custom labels for differentiation
          #      - source_labels: [__meta_kubernetes_pod_node_name]
          #        target_label: node_name
          #      - source_labels: [__meta_kubernetes_namespace]
          #        target_label: namespace
          #      - source_labels: [__meta_kubernetes_pod_name]
          #        target_label: pod_name
